version: "2.1"
services:

  traefik:
    image: traefik:v2.0
    restart: always
    container_name: traefik
    ports:
      - "80:80" # <== http
      - "8080:8080" # <== :8080 is where the dashboard runs on
      - "443:443" # <== https
    command:
    #### These are the CLI commands that will configure Traefik and tell it how to work! ####
      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - --api.insecure=true # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
      - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=DEBUG # <== Setting the level of the logs from traefik
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
      #- --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
      - --providers.docker.network=mynet # <== Operate on the docker network named web
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
      #- --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      #- --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
      #- --certificatesresolvers.mytlschallenge.acme.email=theafkdeveloper@gmail.com # <== Setting email for certs
      #- --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
    volumes:
      #- ./letsencrypt:/letsencrypt # <== Volume for certs (TLS)
      - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
      #- ./dynamic.yaml:/dynamic.yaml # <== Volume for dynamic conf file, **ref: line 27
    networks:
      - mynet # <== Placing traefik on the network named web, to access containers on this network
    labels:
    #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      - "traefik.http.routers.api.rule=Host(`192.168.186.131`)" # <== Setting the domain for the dashboard
      - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access


  bazarr:
    image: ghcr.io/linuxserver/bazarr
    container_name: bazarr
   
    environment:
      - PUID=0
      - PGID=0
      - TZ=Europe/Paris
    volumes:
      - /home/tp_torrent/torrent_tp/bazarr/data:/config
      - /home/tp_torrent/torrent_tp/commun_folder:/movies
      - /home/tp_torrent/torrent_tp/commun_folder:/tv
   # ports:
    #  - 6767:6767
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr_back.middlewares=bazarr-prefix"
      - "traefik.http.middlewares.bazarr-prefix.stripprefix.prefixes=/bazarr"

      - "traefik.http.routers.bazarr.rule=PathPrefix(`/bazarr{regex:$$|/.*}`)"
     
      - "traefik.http.routers.bazarr_back.tls=true" 
      - "traefik.http.routers.bazarr_back.entrypoints=web"
      - "traefik.http.routers.bazarr_back.service=bazarr_back"
      - "traefik.http.services.bazarr_back.loadbalancer.server.port=6767"
    networks:
      - mynet
    restart: unless-stopped

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
   # ports:
     # - 9000:9000
     # - 8000:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /home/tp_torrent/torrent_tp/dataportainer:/data
    labels:
    #front
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=web"
      - "traefik.http.routers.portainer.rule=PathPrefix(`/portainer{regex:$$|/.*}`)"
      - "traefik.http.routers.portainer.middlewares=portainer-prefix"
      - "traefik.http.middlewares.portainer-prefix.stripprefix.prefixes=/portainer"
      - "traefik.http.routers.portainer.service=portainer"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      #back
      - "traefik.http.routers.portainer_back.entrypoints=web"
      - "traefik.http.services.portainer_back.loadbalancer.server.port=8000"
      - "traefik.http.routers.portainer_back.service=portainer_back"
    networks:
      - mynet


  transmission:
    image: ghcr.io/linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
      - USER=teamUser
      - PASS=Passw0rd90@
      - WHITELIST=
    volumes:
      - /home/tp_torrent/torrent_tp/transmission/config:/config
      - /home/tp_torrent/torrent_tp/commun_folder/downloads:/downloads
      - /home/tp_torrent/torrent_tp/transmission/watch:/watch
    #ports:
    #  - 9091:9091
    #  - 51413:51413
    #  - 51413:51413/udp
    labels:
       - "traefik.enable=true"
       - "traefik.http.routers.transmission.rule=PathPrefix(`/transmission{regex:$$|/.*}`)"
       - "traefik.http.routers.client_torrents.entrypoints=web"
       - "traefik.http.routers.client_torrents.tls=true"
       - "traefik.http.services.client_torrents.loadbalancer.server.port=9091"
    restart: unless-stopped
    networks:
      - mynet
  
  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=0
      - PGID=0
      - TZ=Europe/Paris
    volumes:
      - /home/tp_torrent/torrent_tp/sonarr/data:/config
      - /home/tp_torrent/torrent_tp/sonarr/tvseries:/tv
      - /home/tp_torrent/torrent_tp/commun_folder/downloads:/downloads
    
#    ports:
#      - 8989:8989
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=PathPrefix(`/sonarr{regex:$$|/.*}`)"
     
      - "traefik.http.routers.sonarr_back.tls=true"
      - "traefik.http.routers.sonarr_back.entrypoints=web"
      - "traefik.http.routers.sonarr_back.service=sonarr_back"
      - "traefik.http.services.sonarr_back.loadbalancer.server.port=8989"

    networks:
      - mynet

  jackett:
    image: ghcr.io/linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
    volumes:
      - /home/tp_torrent/torrent_tp/jackett/config:/config
      - /home/tp_torrent/torrent_tp/jackett/downloads:/downloads
    #ports:
     # - 9117:9117
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=PathPrefix(`/jackett{regex:$$|/.*}`)"

      - "traefik.http.routers.jackett_back.tls=true"
      - "traefik.http.routers.jackett_back.entrypoints=web"
      - "traefik.http.routers.jackett_back.service=jackett_back"
      - "traefik.http.services.jackett_back.loadbalancer.server.port=9117"
    networks:
      - mynet

  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=0
      - PGID=0
      - TZ=Europe/Paris
    volumes:
      - /home/tp_torrent/torrent_tp/radarr/data:/config
      - /home/tp_torrent/torrent_tp/radarr/movies:/movies
      - /home/tp_torrent/torrent_tp/commun_folder/downloads:/downloads
    #ports:
    #  - 7878:7878
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=PathPrefix(`/radarr{regex:$$|/.*}`)"

      - "traefik.http.routers.radarr_back.tls=true"
      - "traefik.http.routers.radarr_back.entrypoints=web"
      - "traefik.http.routers.radarr_back.service=radarr_back"
      - "traefik.http.services.radarr_back.loadbalancer.server.port=7878"
    networks:
      - mynet

  jellyfin:
    image: ghcr.io/linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
    volumes:
      - /home/tp_torrent/torrent_tp/jellyfin/library:/config
      - /home/tp_torrent/torrent_tp/sonarr/tvseries:/data/tvshows
      - /home/tp_torrent/torrent_tp/radarr/movies:/data/Movies
    ports:
      - 8096:8096
      #- 8920:8920 #optional
      #- 7359:7359/udp #optional
     # - 1901:1901/udp #optional
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=PathPrefix(`/jellyfin{regex:$$|/.*}`)"

      - "traefik.http.routers.jellyfin_back.tls=true"
      - "traefik.http.routers.jellyfin_back.entrypoints=web"
      - "traefik.http.routers.jellyfin_back.service=jellyfin_back"
      - "traefik.http.services.jellyfin_back.loadbalancer.server.port=8096"
    networks:
      - mynet

  flaresolverr: 
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
    ports:
      - "${PORT:-8191}:8191"
    restart: unless-stopped
    networks:
      - mynet

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/tp_torrent/torrent_tp/.docker/config.json:/config.json
    ports:
      - 8081:8081
    command: --interval 60
    restart: unless-stopped
    networks:
      - mynet

  
networks:
  mynet:
    external: true
